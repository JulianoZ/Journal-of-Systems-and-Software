/**
 * generated by Xtext 2.13.0
 */
package br.dslcross.crossplatform.generator;

import br.dslcross.crossplatform.crossPlatform.Deploy;
import br.dslcross.crossplatform.crossPlatform.Platform;
import br.dslcross.crossplatform.crossPlatform.PlatformDecl;
import br.dslcross.crossplatform.generator.CrossplatformGeneratorCSharp;
import br.dslcross.crossplatform.generator.CrossplatformGeneratorJava;
import br.dslcross.crossplatform.generator.CrossplatformGeneratorSwift;
import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CrossPlatformGenerator extends AbstractGenerator {
  private String LingDaPlataforma = "";
  
  private String NomePlataformaDeclarada = "";
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Inject
  private CrossplatformGeneratorJava generatorJava;
  
  @Inject
  private CrossplatformGeneratorCSharp generatorCSharp;
  
  @Inject
  private CrossplatformGeneratorSwift generatorSwift;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Deploy> _filter = Iterables.<Deploy>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Deploy.class);
    for (final Deploy e : _filter) {
      EList<Platform> _entityToDeploy = e.getEntityToDeploy();
      for (final Platform pl : _entityToDeploy) {
        {
          String _name = pl.getEnt().getName();
          String _plus = ("Nome Entidade: " + _name);
          String _plus_1 = (_plus + " Tipo da entidade (plataforma):  ");
          String _string = this._iQualifiedNameProvider.getFullyQualifiedName(pl.getPlat()).toString();
          String _plus_2 = (_plus_1 + _string);
          InputOutput.<String>println(_plus_2);
          Iterable<PlatformDecl> _filter_1 = Iterables.<PlatformDecl>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), PlatformDecl.class);
          for (final PlatformDecl pe : _filter_1) {
            String _string_1 = pe.getName().toString();
            String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(pl.getPlat()).toString();
            boolean _equals = Objects.equal(_string_1, _string_2);
            if (_equals) {
              this.LingDaPlataforma = pe.getBase().toString();
              this.NomePlataformaDeclarada = this._iQualifiedNameProvider.getFullyQualifiedName(pl.getPlat()).toString();
            }
          }
          final String LingDaPlataforma = this.LingDaPlataforma;
          if (LingDaPlataforma != null) {
            switch (LingDaPlataforma) {
              case "Swift":
                this.generatorSwift.GenerateData(resource, fsa, context, pl.getEnt().getName(), this.NomePlataformaDeclarada);
                break;
              case "Java":
                this.generatorJava.GenerateData(resource, fsa, context, pl.getEnt().getName(), this.NomePlataformaDeclarada);
                break;
              case "CSharp":
                this.generatorCSharp.GenerateData(resource, fsa, context, pl.getEnt().getName(), this.NomePlataformaDeclarada);
                break;
            }
          }
        }
      }
    }
  }
}
