/**
 * generated by Xtext 2.24.0
 */
package br.dslcross.crossplatform.crossPlatform.impl;

import br.dslcross.crossplatform.crossPlatform.Attribute;
import br.dslcross.crossplatform.crossPlatform.CrossPlatformPackage;
import br.dslcross.crossplatform.crossPlatform.SpecialCommand;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Special Command</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.dslcross.crossplatform.crossPlatform.impl.SpecialCommandImpl#getCommand <em>Command</em>}</li>
 *   <li>{@link br.dslcross.crossplatform.crossPlatform.impl.SpecialCommandImpl#getAttr <em>Attr</em>}</li>
 *   <li>{@link br.dslcross.crossplatform.crossPlatform.impl.SpecialCommandImpl#getCommandCont <em>Command Cont</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpecialCommandImpl extends CommandOperationImpl implements SpecialCommand
{
  /**
   * The default value of the '{@link #getCommand() <em>Command</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommand()
   * @generated
   * @ordered
   */
  protected static final String COMMAND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCommand() <em>Command</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommand()
   * @generated
   * @ordered
   */
  protected String command = COMMAND_EDEFAULT;

  /**
   * The cached value of the '{@link #getAttr() <em>Attr</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttr()
   * @generated
   * @ordered
   */
  protected Attribute attr;

  /**
   * The default value of the '{@link #getCommandCont() <em>Command Cont</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommandCont()
   * @generated
   * @ordered
   */
  protected static final String COMMAND_CONT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCommandCont() <em>Command Cont</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommandCont()
   * @generated
   * @ordered
   */
  protected String commandCont = COMMAND_CONT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpecialCommandImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CrossPlatformPackage.Literals.SPECIAL_COMMAND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCommand()
  {
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCommand(String newCommand)
  {
    String oldCommand = command;
    command = newCommand;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrossPlatformPackage.SPECIAL_COMMAND__COMMAND, oldCommand, command));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute getAttr()
  {
    if (attr != null && attr.eIsProxy())
    {
      InternalEObject oldAttr = (InternalEObject)attr;
      attr = (Attribute)eResolveProxy(oldAttr);
      if (attr != oldAttr)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CrossPlatformPackage.SPECIAL_COMMAND__ATTR, oldAttr, attr));
      }
    }
    return attr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute basicGetAttr()
  {
    return attr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttr(Attribute newAttr)
  {
    Attribute oldAttr = attr;
    attr = newAttr;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrossPlatformPackage.SPECIAL_COMMAND__ATTR, oldAttr, attr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCommandCont()
  {
    return commandCont;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCommandCont(String newCommandCont)
  {
    String oldCommandCont = commandCont;
    commandCont = newCommandCont;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrossPlatformPackage.SPECIAL_COMMAND__COMMAND_CONT, oldCommandCont, commandCont));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CrossPlatformPackage.SPECIAL_COMMAND__COMMAND:
        return getCommand();
      case CrossPlatformPackage.SPECIAL_COMMAND__ATTR:
        if (resolve) return getAttr();
        return basicGetAttr();
      case CrossPlatformPackage.SPECIAL_COMMAND__COMMAND_CONT:
        return getCommandCont();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CrossPlatformPackage.SPECIAL_COMMAND__COMMAND:
        setCommand((String)newValue);
        return;
      case CrossPlatformPackage.SPECIAL_COMMAND__ATTR:
        setAttr((Attribute)newValue);
        return;
      case CrossPlatformPackage.SPECIAL_COMMAND__COMMAND_CONT:
        setCommandCont((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CrossPlatformPackage.SPECIAL_COMMAND__COMMAND:
        setCommand(COMMAND_EDEFAULT);
        return;
      case CrossPlatformPackage.SPECIAL_COMMAND__ATTR:
        setAttr((Attribute)null);
        return;
      case CrossPlatformPackage.SPECIAL_COMMAND__COMMAND_CONT:
        setCommandCont(COMMAND_CONT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CrossPlatformPackage.SPECIAL_COMMAND__COMMAND:
        return COMMAND_EDEFAULT == null ? command != null : !COMMAND_EDEFAULT.equals(command);
      case CrossPlatformPackage.SPECIAL_COMMAND__ATTR:
        return attr != null;
      case CrossPlatformPackage.SPECIAL_COMMAND__COMMAND_CONT:
        return COMMAND_CONT_EDEFAULT == null ? commandCont != null : !COMMAND_CONT_EDEFAULT.equals(commandCont);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (command: ");
    result.append(command);
    result.append(", commandCont: ");
    result.append(commandCont);
    result.append(')');
    return result.toString();
  }

} //SpecialCommandImpl
