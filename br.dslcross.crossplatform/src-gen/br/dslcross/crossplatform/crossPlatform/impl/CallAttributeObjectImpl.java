/**
 * generated by Xtext 2.24.0
 */
package br.dslcross.crossplatform.crossPlatform.impl;

import br.dslcross.crossplatform.crossPlatform.AttribID;
import br.dslcross.crossplatform.crossPlatform.CallAttributeObject;
import br.dslcross.crossplatform.crossPlatform.CrossPlatformPackage;
import br.dslcross.crossplatform.crossPlatform.ExprArit;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Call Attribute Object</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.dslcross.crossplatform.crossPlatform.impl.CallAttributeObjectImpl#getObj <em>Obj</em>}</li>
 *   <li>{@link br.dslcross.crossplatform.crossPlatform.impl.CallAttributeObjectImpl#getCall <em>Call</em>}</li>
 *   <li>{@link br.dslcross.crossplatform.crossPlatform.impl.CallAttributeObjectImpl#getE <em>E</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CallAttributeObjectImpl extends CommandFeatureImpl implements CallAttributeObject
{
  /**
   * The cached value of the '{@link #getObj() <em>Obj</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObj()
   * @generated
   * @ordered
   */
  protected AttribID obj;

  /**
   * The cached value of the '{@link #getCall() <em>Call</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCall()
   * @generated
   * @ordered
   */
  protected EList<AttribID> call;

  /**
   * The cached value of the '{@link #getE() <em>E</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getE()
   * @generated
   * @ordered
   */
  protected ExprArit e;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CallAttributeObjectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CrossPlatformPackage.Literals.CALL_ATTRIBUTE_OBJECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttribID getObj()
  {
    return obj;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetObj(AttribID newObj, NotificationChain msgs)
  {
    AttribID oldObj = obj;
    obj = newObj;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__OBJ, oldObj, newObj);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObj(AttribID newObj)
  {
    if (newObj != obj)
    {
      NotificationChain msgs = null;
      if (obj != null)
        msgs = ((InternalEObject)obj).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__OBJ, null, msgs);
      if (newObj != null)
        msgs = ((InternalEObject)newObj).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__OBJ, null, msgs);
      msgs = basicSetObj(newObj, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__OBJ, newObj, newObj));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AttribID> getCall()
  {
    if (call == null)
    {
      call = new EObjectContainmentEList<AttribID>(AttribID.class, this, CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__CALL);
    }
    return call;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprArit getE()
  {
    return e;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetE(ExprArit newE, NotificationChain msgs)
  {
    ExprArit oldE = e;
    e = newE;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__E, oldE, newE);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setE(ExprArit newE)
  {
    if (newE != e)
    {
      NotificationChain msgs = null;
      if (e != null)
        msgs = ((InternalEObject)e).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__E, null, msgs);
      if (newE != null)
        msgs = ((InternalEObject)newE).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__E, null, msgs);
      msgs = basicSetE(newE, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__E, newE, newE));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__OBJ:
        return basicSetObj(null, msgs);
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__CALL:
        return ((InternalEList<?>)getCall()).basicRemove(otherEnd, msgs);
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__E:
        return basicSetE(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__OBJ:
        return getObj();
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__CALL:
        return getCall();
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__E:
        return getE();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__OBJ:
        setObj((AttribID)newValue);
        return;
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__CALL:
        getCall().clear();
        getCall().addAll((Collection<? extends AttribID>)newValue);
        return;
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__E:
        setE((ExprArit)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__OBJ:
        setObj((AttribID)null);
        return;
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__CALL:
        getCall().clear();
        return;
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__E:
        setE((ExprArit)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__OBJ:
        return obj != null;
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__CALL:
        return call != null && !call.isEmpty();
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT__E:
        return e != null;
    }
    return super.eIsSet(featureID);
  }

} //CallAttributeObjectImpl
