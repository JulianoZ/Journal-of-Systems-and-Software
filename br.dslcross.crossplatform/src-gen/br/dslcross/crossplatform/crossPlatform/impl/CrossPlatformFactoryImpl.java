/**
 * generated by Xtext 2.24.0
 */
package br.dslcross.crossplatform.crossPlatform.impl;

import br.dslcross.crossplatform.crossPlatform.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CrossPlatformFactoryImpl extends EFactoryImpl implements CrossPlatformFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CrossPlatformFactory init()
  {
    try
    {
      CrossPlatformFactory theCrossPlatformFactory = (CrossPlatformFactory)EPackage.Registry.INSTANCE.getEFactory(CrossPlatformPackage.eNS_URI);
      if (theCrossPlatformFactory != null)
      {
        return theCrossPlatformFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CrossPlatformFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CrossPlatformFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CrossPlatformPackage.DOMAINMODEL: return createDomainmodel();
      case CrossPlatformPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case CrossPlatformPackage.PACKAGE_DECLARATION: return createPackageDeclaration();
      case CrossPlatformPackage.IMPORT: return createImport();
      case CrossPlatformPackage.TYPE: return createType();
      case CrossPlatformPackage.PLATFORM_DECL: return createPlatformDecl();
      case CrossPlatformPackage.GLOBAL_OLD: return createGlobalOld();
      case CrossPlatformPackage.GLOBAL_ENTITY: return createGlobalEntity();
      case CrossPlatformPackage.GLOBAL: return createGlobal();
      case CrossPlatformPackage.DEPLOY: return createDeploy();
      case CrossPlatformPackage.PLATFORM: return createPlatform();
      case CrossPlatformPackage.ENTITY_ESP: return createEntityEsp();
      case CrossPlatformPackage.DATA_TYPE: return createDataType();
      case CrossPlatformPackage.ENTITY: return createEntity();
      case CrossPlatformPackage.COMMAND_FEATURE: return createCommandFeature();
      case CrossPlatformPackage.COMMAND_PLAT: return createCommandPlat();
      case CrossPlatformPackage.OPERATION_GLOB_CALL_OLD: return createOperationGlobCallOld();
      case CrossPlatformPackage.ENTITY_GLOB_CALL: return createEntityGlobCall();
      case CrossPlatformPackage.OPERATION_GLOB_CALL: return createOperationGlobCall();
      case CrossPlatformPackage.OPERATION: return createOperation();
      case CrossPlatformPackage.OPERATION_GLOBAL_OLD: return createOperationGlobalOld();
      case CrossPlatformPackage.ENTITY_GLOBAL: return createEntityGlobal();
      case CrossPlatformPackage.OPERATION_GLOBAL: return createOperationGlobal();
      case CrossPlatformPackage.ATTRIBUTE: return createAttribute();
      case CrossPlatformPackage.PARAM_LIST: return createParamList();
      case CrossPlatformPackage.DSL_TYPE_REF: return createDSLTypeRef();
      case CrossPlatformPackage.DSL_CONCRETE_TYPE_REF: return createDSLConcreteTypeRef();
      case CrossPlatformPackage.DSL_GENERIC_TYPE_REF: return createDSLGenericTypeRef();
      case CrossPlatformPackage.DSL_GENERIC_TYPE: return createDSLGenericType();
      case CrossPlatformPackage.PARAMETER: return createParameter();
      case CrossPlatformPackage.COMMAND_OPERATION: return createCommandOperation();
      case CrossPlatformPackage.SPECIAL_COMMAND: return createSpecialCommand();
      case CrossPlatformPackage.STRING_TEMPLATE_FREE_COD: return createStringTemplateFreeCod();
      case CrossPlatformPackage.ABREV_CMD: return createAbrevCmd();
      case CrossPlatformPackage.METHOD_CALL_CMD: return createMethodCallCmd();
      case CrossPlatformPackage.VECTOR: return createVector();
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT: return createCallAttributeObject();
      case CrossPlatformPackage.METHOD_CALL_GLOBAL: return createMethodCallGlobal();
      case CrossPlatformPackage.OP_LOGICO_WHILE: return createOpLogicoWhile();
      case CrossPlatformPackage.OP_LOGICO_DO_WHILE: return createOpLogicoDoWhile();
      case CrossPlatformPackage.OP_LOGICO_IF: return createOpLogicoIF();
      case CrossPlatformPackage.OP_ELSE_IF: return createOpElseIf();
      case CrossPlatformPackage.OP_ELSE: return createOpElse();
      case CrossPlatformPackage.EXPR_LOGICA: return createExprLogica();
      case CrossPlatformPackage.TERMO_LOGICO: return createTermoLogico();
      case CrossPlatformPackage.FATOR_LOGICO: return createFatorLogico();
      case CrossPlatformPackage.COM_LOG: return createComLog();
      case CrossPlatformPackage.EXPR_L: return createExprL();
      case CrossPlatformPackage.ATTRIB_ID: return createAttribID();
      case CrossPlatformPackage.OP_LOGICO_FOR: return createOpLogicoFor();
      case CrossPlatformPackage.EXPR_LOGIC_FOR: return createExprLogicFor();
      case CrossPlatformPackage.ASSIGNMENT_CMD_FOR: return createAssignmentCmdFor();
      case CrossPlatformPackage.EXPR_ARIT: return createExprArit();
      case CrossPlatformPackage.TERMO: return createTermo();
      case CrossPlatformPackage.FATOR: return createFator();
      case CrossPlatformPackage.OP_LOGICO: return createOpLogico();
      case CrossPlatformPackage.METHOD_CALL_OP: return createMethodCallOp();
      case CrossPlatformPackage.METHOD_CALL_GLOB: return createMethodCallGlob();
      case CrossPlatformPackage.ATTRIBUTE_CALL: return createAttributeCall();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Domainmodel createDomainmodel()
  {
    DomainmodelImpl domainmodel = new DomainmodelImpl();
    return domainmodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PackageDeclaration createPackageDeclaration()
  {
    PackageDeclarationImpl packageDeclaration = new PackageDeclarationImpl();
    return packageDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlatformDecl createPlatformDecl()
  {
    PlatformDeclImpl platformDecl = new PlatformDeclImpl();
    return platformDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GlobalOld createGlobalOld()
  {
    GlobalOldImpl globalOld = new GlobalOldImpl();
    return globalOld;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GlobalEntity createGlobalEntity()
  {
    GlobalEntityImpl globalEntity = new GlobalEntityImpl();
    return globalEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Global createGlobal()
  {
    GlobalImpl global = new GlobalImpl();
    return global;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Deploy createDeploy()
  {
    DeployImpl deploy = new DeployImpl();
    return deploy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Platform createPlatform()
  {
    PlatformImpl platform = new PlatformImpl();
    return platform;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityEsp createEntityEsp()
  {
    EntityEspImpl entityEsp = new EntityEspImpl();
    return entityEsp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType createDataType()
  {
    DataTypeImpl dataType = new DataTypeImpl();
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommandFeature createCommandFeature()
  {
    CommandFeatureImpl commandFeature = new CommandFeatureImpl();
    return commandFeature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommandPlat createCommandPlat()
  {
    CommandPlatImpl commandPlat = new CommandPlatImpl();
    return commandPlat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationGlobCallOld createOperationGlobCallOld()
  {
    OperationGlobCallOldImpl operationGlobCallOld = new OperationGlobCallOldImpl();
    return operationGlobCallOld;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityGlobCall createEntityGlobCall()
  {
    EntityGlobCallImpl entityGlobCall = new EntityGlobCallImpl();
    return entityGlobCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationGlobCall createOperationGlobCall()
  {
    OperationGlobCallImpl operationGlobCall = new OperationGlobCallImpl();
    return operationGlobCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationGlobalOld createOperationGlobalOld()
  {
    OperationGlobalOldImpl operationGlobalOld = new OperationGlobalOldImpl();
    return operationGlobalOld;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityGlobal createEntityGlobal()
  {
    EntityGlobalImpl entityGlobal = new EntityGlobalImpl();
    return entityGlobal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationGlobal createOperationGlobal()
  {
    OperationGlobalImpl operationGlobal = new OperationGlobalImpl();
    return operationGlobal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamList createParamList()
  {
    ParamListImpl paramList = new ParamListImpl();
    return paramList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLTypeRef createDSLTypeRef()
  {
    DSLTypeRefImpl dslTypeRef = new DSLTypeRefImpl();
    return dslTypeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLConcreteTypeRef createDSLConcreteTypeRef()
  {
    DSLConcreteTypeRefImpl dslConcreteTypeRef = new DSLConcreteTypeRefImpl();
    return dslConcreteTypeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLGenericTypeRef createDSLGenericTypeRef()
  {
    DSLGenericTypeRefImpl dslGenericTypeRef = new DSLGenericTypeRefImpl();
    return dslGenericTypeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DSLGenericType createDSLGenericType()
  {
    DSLGenericTypeImpl dslGenericType = new DSLGenericTypeImpl();
    return dslGenericType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommandOperation createCommandOperation()
  {
    CommandOperationImpl commandOperation = new CommandOperationImpl();
    return commandOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecialCommand createSpecialCommand()
  {
    SpecialCommandImpl specialCommand = new SpecialCommandImpl();
    return specialCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringTemplateFreeCod createStringTemplateFreeCod()
  {
    StringTemplateFreeCodImpl stringTemplateFreeCod = new StringTemplateFreeCodImpl();
    return stringTemplateFreeCod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbrevCmd createAbrevCmd()
  {
    AbrevCmdImpl abrevCmd = new AbrevCmdImpl();
    return abrevCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodCallCmd createMethodCallCmd()
  {
    MethodCallCmdImpl methodCallCmd = new MethodCallCmdImpl();
    return methodCallCmd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vector createVector()
  {
    VectorImpl vector = new VectorImpl();
    return vector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallAttributeObject createCallAttributeObject()
  {
    CallAttributeObjectImpl callAttributeObject = new CallAttributeObjectImpl();
    return callAttributeObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodCallGlobal createMethodCallGlobal()
  {
    MethodCallGlobalImpl methodCallGlobal = new MethodCallGlobalImpl();
    return methodCallGlobal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpLogicoWhile createOpLogicoWhile()
  {
    OpLogicoWhileImpl opLogicoWhile = new OpLogicoWhileImpl();
    return opLogicoWhile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpLogicoDoWhile createOpLogicoDoWhile()
  {
    OpLogicoDoWhileImpl opLogicoDoWhile = new OpLogicoDoWhileImpl();
    return opLogicoDoWhile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpLogicoIF createOpLogicoIF()
  {
    OpLogicoIFImpl opLogicoIF = new OpLogicoIFImpl();
    return opLogicoIF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpElseIf createOpElseIf()
  {
    OpElseIfImpl opElseIf = new OpElseIfImpl();
    return opElseIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpElse createOpElse()
  {
    OpElseImpl opElse = new OpElseImpl();
    return opElse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprLogica createExprLogica()
  {
    ExprLogicaImpl exprLogica = new ExprLogicaImpl();
    return exprLogica;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TermoLogico createTermoLogico()
  {
    TermoLogicoImpl termoLogico = new TermoLogicoImpl();
    return termoLogico;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FatorLogico createFatorLogico()
  {
    FatorLogicoImpl fatorLogico = new FatorLogicoImpl();
    return fatorLogico;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComLog createComLog()
  {
    ComLogImpl comLog = new ComLogImpl();
    return comLog;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprL createExprL()
  {
    ExprLImpl exprL = new ExprLImpl();
    return exprL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttribID createAttribID()
  {
    AttribIDImpl attribID = new AttribIDImpl();
    return attribID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpLogicoFor createOpLogicoFor()
  {
    OpLogicoForImpl opLogicoFor = new OpLogicoForImpl();
    return opLogicoFor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprLogicFor createExprLogicFor()
  {
    ExprLogicForImpl exprLogicFor = new ExprLogicForImpl();
    return exprLogicFor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssignmentCmdFor createAssignmentCmdFor()
  {
    AssignmentCmdForImpl assignmentCmdFor = new AssignmentCmdForImpl();
    return assignmentCmdFor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprArit createExprArit()
  {
    ExprAritImpl exprArit = new ExprAritImpl();
    return exprArit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Termo createTermo()
  {
    TermoImpl termo = new TermoImpl();
    return termo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Fator createFator()
  {
    FatorImpl fator = new FatorImpl();
    return fator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpLogico createOpLogico()
  {
    OpLogicoImpl opLogico = new OpLogicoImpl();
    return opLogico;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodCallOp createMethodCallOp()
  {
    MethodCallOpImpl methodCallOp = new MethodCallOpImpl();
    return methodCallOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodCallGlob createMethodCallGlob()
  {
    MethodCallGlobImpl methodCallGlob = new MethodCallGlobImpl();
    return methodCallGlob;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeCall createAttributeCall()
  {
    AttributeCallImpl attributeCall = new AttributeCallImpl();
    return attributeCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CrossPlatformPackage getCrossPlatformPackage()
  {
    return (CrossPlatformPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CrossPlatformPackage getPackage()
  {
    return CrossPlatformPackage.eINSTANCE;
  }

} //CrossPlatformFactoryImpl
