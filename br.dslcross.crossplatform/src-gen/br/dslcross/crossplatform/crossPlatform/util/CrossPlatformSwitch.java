/**
 * generated by Xtext 2.24.0
 */
package br.dslcross.crossplatform.crossPlatform.util;

import br.dslcross.crossplatform.crossPlatform.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see br.dslcross.crossplatform.crossPlatform.CrossPlatformPackage
 * @generated
 */
public class CrossPlatformSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CrossPlatformPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CrossPlatformSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = CrossPlatformPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case CrossPlatformPackage.DOMAINMODEL:
      {
        Domainmodel domainmodel = (Domainmodel)theEObject;
        T result = caseDomainmodel(domainmodel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.ABSTRACT_ELEMENT:
      {
        AbstractElement abstractElement = (AbstractElement)theEObject;
        T result = caseAbstractElement(abstractElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.PACKAGE_DECLARATION:
      {
        PackageDeclaration packageDeclaration = (PackageDeclaration)theEObject;
        T result = casePackageDeclaration(packageDeclaration);
        if (result == null) result = caseAbstractElement(packageDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = caseAbstractElement(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = caseAbstractElement(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.PLATFORM_DECL:
      {
        PlatformDecl platformDecl = (PlatformDecl)theEObject;
        T result = casePlatformDecl(platformDecl);
        if (result == null) result = caseType(platformDecl);
        if (result == null) result = caseAbstractElement(platformDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.GLOBAL_OLD:
      {
        GlobalOld globalOld = (GlobalOld)theEObject;
        T result = caseGlobalOld(globalOld);
        if (result == null) result = caseType(globalOld);
        if (result == null) result = caseAbstractElement(globalOld);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.GLOBAL_ENTITY:
      {
        GlobalEntity globalEntity = (GlobalEntity)theEObject;
        T result = caseGlobalEntity(globalEntity);
        if (result == null) result = caseType(globalEntity);
        if (result == null) result = caseAbstractElement(globalEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.GLOBAL:
      {
        Global global = (Global)theEObject;
        T result = caseGlobal(global);
        if (result == null) result = caseType(global);
        if (result == null) result = caseAbstractElement(global);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.DEPLOY:
      {
        Deploy deploy = (Deploy)theEObject;
        T result = caseDeploy(deploy);
        if (result == null) result = caseType(deploy);
        if (result == null) result = caseAbstractElement(deploy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.PLATFORM:
      {
        Platform platform = (Platform)theEObject;
        T result = casePlatform(platform);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.ENTITY_ESP:
      {
        EntityEsp entityEsp = (EntityEsp)theEObject;
        T result = caseEntityEsp(entityEsp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.DATA_TYPE:
      {
        DataType dataType = (DataType)theEObject;
        T result = caseDataType(dataType);
        if (result == null) result = caseType(dataType);
        if (result == null) result = caseAbstractElement(dataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.ENTITY:
      {
        Entity entity = (Entity)theEObject;
        T result = caseEntity(entity);
        if (result == null) result = caseType(entity);
        if (result == null) result = caseAbstractElement(entity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.COMMAND_FEATURE:
      {
        CommandFeature commandFeature = (CommandFeature)theEObject;
        T result = caseCommandFeature(commandFeature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.COMMAND_PLAT:
      {
        CommandPlat commandPlat = (CommandPlat)theEObject;
        T result = caseCommandPlat(commandPlat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.OPERATION_GLOB_CALL_OLD:
      {
        OperationGlobCallOld operationGlobCallOld = (OperationGlobCallOld)theEObject;
        T result = caseOperationGlobCallOld(operationGlobCallOld);
        if (result == null) result = caseCommandFeature(operationGlobCallOld);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.ENTITY_GLOB_CALL:
      {
        EntityGlobCall entityGlobCall = (EntityGlobCall)theEObject;
        T result = caseEntityGlobCall(entityGlobCall);
        if (result == null) result = caseCommandFeature(entityGlobCall);
        if (result == null) result = caseCommandOperation(entityGlobCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.OPERATION_GLOB_CALL:
      {
        OperationGlobCall operationGlobCall = (OperationGlobCall)theEObject;
        T result = caseOperationGlobCall(operationGlobCall);
        if (result == null) result = caseCommandFeature(operationGlobCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.OPERATION:
      {
        Operation operation = (Operation)theEObject;
        T result = caseOperation(operation);
        if (result == null) result = caseCommandFeature(operation);
        if (result == null) result = caseCommandPlat(operation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.OPERATION_GLOBAL_OLD:
      {
        OperationGlobalOld operationGlobalOld = (OperationGlobalOld)theEObject;
        T result = caseOperationGlobalOld(operationGlobalOld);
        if (result == null) result = caseCommandPlat(operationGlobalOld);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.ENTITY_GLOBAL:
      {
        EntityGlobal entityGlobal = (EntityGlobal)theEObject;
        T result = caseEntityGlobal(entityGlobal);
        if (result == null) result = caseCommandPlat(entityGlobal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.OPERATION_GLOBAL:
      {
        OperationGlobal operationGlobal = (OperationGlobal)theEObject;
        T result = caseOperationGlobal(operationGlobal);
        if (result == null) result = caseCommandPlat(operationGlobal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = caseCommandFeature(attribute);
        if (result == null) result = caseCommandPlat(attribute);
        if (result == null) result = caseCommandOperation(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.PARAM_LIST:
      {
        ParamList paramList = (ParamList)theEObject;
        T result = caseParamList(paramList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.DSL_TYPE_REF:
      {
        DSLTypeRef dslTypeRef = (DSLTypeRef)theEObject;
        T result = caseDSLTypeRef(dslTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.DSL_CONCRETE_TYPE_REF:
      {
        DSLConcreteTypeRef dslConcreteTypeRef = (DSLConcreteTypeRef)theEObject;
        T result = caseDSLConcreteTypeRef(dslConcreteTypeRef);
        if (result == null) result = caseDSLTypeRef(dslConcreteTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.DSL_GENERIC_TYPE_REF:
      {
        DSLGenericTypeRef dslGenericTypeRef = (DSLGenericTypeRef)theEObject;
        T result = caseDSLGenericTypeRef(dslGenericTypeRef);
        if (result == null) result = caseDSLTypeRef(dslGenericTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.DSL_GENERIC_TYPE:
      {
        DSLGenericType dslGenericType = (DSLGenericType)theEObject;
        T result = caseDSLGenericType(dslGenericType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.COMMAND_OPERATION:
      {
        CommandOperation commandOperation = (CommandOperation)theEObject;
        T result = caseCommandOperation(commandOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.SPECIAL_COMMAND:
      {
        SpecialCommand specialCommand = (SpecialCommand)theEObject;
        T result = caseSpecialCommand(specialCommand);
        if (result == null) result = caseCommandOperation(specialCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.STRING_TEMPLATE_FREE_COD:
      {
        StringTemplateFreeCod stringTemplateFreeCod = (StringTemplateFreeCod)theEObject;
        T result = caseStringTemplateFreeCod(stringTemplateFreeCod);
        if (result == null) result = caseCommandFeature(stringTemplateFreeCod);
        if (result == null) result = caseCommandOperation(stringTemplateFreeCod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.ABREV_CMD:
      {
        AbrevCmd abrevCmd = (AbrevCmd)theEObject;
        T result = caseAbrevCmd(abrevCmd);
        if (result == null) result = caseCommandOperation(abrevCmd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.METHOD_CALL_CMD:
      {
        MethodCallCmd methodCallCmd = (MethodCallCmd)theEObject;
        T result = caseMethodCallCmd(methodCallCmd);
        if (result == null) result = caseCommandOperation(methodCallCmd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.VECTOR:
      {
        Vector vector = (Vector)theEObject;
        T result = caseVector(vector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.CALL_ATTRIBUTE_OBJECT:
      {
        CallAttributeObject callAttributeObject = (CallAttributeObject)theEObject;
        T result = caseCallAttributeObject(callAttributeObject);
        if (result == null) result = caseCommandFeature(callAttributeObject);
        if (result == null) result = caseCommandOperation(callAttributeObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.METHOD_CALL_GLOBAL:
      {
        MethodCallGlobal methodCallGlobal = (MethodCallGlobal)theEObject;
        T result = caseMethodCallGlobal(methodCallGlobal);
        if (result == null) result = caseCommandOperation(methodCallGlobal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.OP_LOGICO_WHILE:
      {
        OpLogicoWhile opLogicoWhile = (OpLogicoWhile)theEObject;
        T result = caseOpLogicoWhile(opLogicoWhile);
        if (result == null) result = caseCommandOperation(opLogicoWhile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.OP_LOGICO_DO_WHILE:
      {
        OpLogicoDoWhile opLogicoDoWhile = (OpLogicoDoWhile)theEObject;
        T result = caseOpLogicoDoWhile(opLogicoDoWhile);
        if (result == null) result = caseCommandOperation(opLogicoDoWhile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.OP_LOGICO_IF:
      {
        OpLogicoIF opLogicoIF = (OpLogicoIF)theEObject;
        T result = caseOpLogicoIF(opLogicoIF);
        if (result == null) result = caseCommandOperation(opLogicoIF);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.OP_ELSE_IF:
      {
        OpElseIf opElseIf = (OpElseIf)theEObject;
        T result = caseOpElseIf(opElseIf);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.OP_ELSE:
      {
        OpElse opElse = (OpElse)theEObject;
        T result = caseOpElse(opElse);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.EXPR_LOGICA:
      {
        ExprLogica exprLogica = (ExprLogica)theEObject;
        T result = caseExprLogica(exprLogica);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.TERMO_LOGICO:
      {
        TermoLogico termoLogico = (TermoLogico)theEObject;
        T result = caseTermoLogico(termoLogico);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.FATOR_LOGICO:
      {
        FatorLogico fatorLogico = (FatorLogico)theEObject;
        T result = caseFatorLogico(fatorLogico);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.COM_LOG:
      {
        ComLog comLog = (ComLog)theEObject;
        T result = caseComLog(comLog);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.EXPR_L:
      {
        ExprL exprL = (ExprL)theEObject;
        T result = caseExprL(exprL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.ATTRIB_ID:
      {
        AttribID attribID = (AttribID)theEObject;
        T result = caseAttribID(attribID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.OP_LOGICO_FOR:
      {
        OpLogicoFor opLogicoFor = (OpLogicoFor)theEObject;
        T result = caseOpLogicoFor(opLogicoFor);
        if (result == null) result = caseCommandOperation(opLogicoFor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.EXPR_LOGIC_FOR:
      {
        ExprLogicFor exprLogicFor = (ExprLogicFor)theEObject;
        T result = caseExprLogicFor(exprLogicFor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.ASSIGNMENT_CMD_FOR:
      {
        AssignmentCmdFor assignmentCmdFor = (AssignmentCmdFor)theEObject;
        T result = caseAssignmentCmdFor(assignmentCmdFor);
        if (result == null) result = caseAbrevCmd(assignmentCmdFor);
        if (result == null) result = caseCommandOperation(assignmentCmdFor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.EXPR_ARIT:
      {
        ExprArit exprArit = (ExprArit)theEObject;
        T result = caseExprArit(exprArit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.TERMO:
      {
        Termo termo = (Termo)theEObject;
        T result = caseTermo(termo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.FATOR:
      {
        Fator fator = (Fator)theEObject;
        T result = caseFator(fator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.OP_LOGICO:
      {
        OpLogico opLogico = (OpLogico)theEObject;
        T result = caseOpLogico(opLogico);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.METHOD_CALL_OP:
      {
        MethodCallOp methodCallOp = (MethodCallOp)theEObject;
        T result = caseMethodCallOp(methodCallOp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.METHOD_CALL_GLOB:
      {
        MethodCallGlob methodCallGlob = (MethodCallGlob)theEObject;
        T result = caseMethodCallGlob(methodCallGlob);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CrossPlatformPackage.ATTRIBUTE_CALL:
      {
        AttributeCall attributeCall = (AttributeCall)theEObject;
        T result = caseAttributeCall(attributeCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Domainmodel</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Domainmodel</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDomainmodel(Domainmodel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractElement(AbstractElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Package Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Package Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackageDeclaration(PackageDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatformDecl(PlatformDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Global Old</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Global Old</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGlobalOld(GlobalOld object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Global Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Global Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGlobalEntity(GlobalEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Global</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Global</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGlobal(Global object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Deploy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Deploy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeploy(Deploy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Platform</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Platform</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlatform(Platform object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Esp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Esp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityEsp(EntityEsp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataType(DataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntity(Entity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommandFeature(CommandFeature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command Plat</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command Plat</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommandPlat(CommandPlat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Glob Call Old</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Glob Call Old</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationGlobCallOld(OperationGlobCallOld object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Glob Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Glob Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityGlobCall(EntityGlobCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Glob Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Glob Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationGlobCall(OperationGlobCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperation(Operation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Global Old</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Global Old</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationGlobalOld(OperationGlobalOld object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Global</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Global</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityGlobal(EntityGlobal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Global</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Global</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationGlobal(OperationGlobal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Param List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Param List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParamList(ParamList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLTypeRef(DSLTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Concrete Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Concrete Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLConcreteTypeRef(DSLConcreteTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Generic Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Generic Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLGenericTypeRef(DSLGenericTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Generic Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Generic Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLGenericType(DSLGenericType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommandOperation(CommandOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Special Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Special Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecialCommand(SpecialCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Template Free Cod</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Template Free Cod</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringTemplateFreeCod(StringTemplateFreeCod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abrev Cmd</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abrev Cmd</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbrevCmd(AbrevCmd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Call Cmd</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Call Cmd</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodCallCmd(MethodCallCmd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVector(Vector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Attribute Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Attribute Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallAttributeObject(CallAttributeObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Call Global</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Call Global</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodCallGlobal(MethodCallGlobal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Op Logico While</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Op Logico While</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpLogicoWhile(OpLogicoWhile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Op Logico Do While</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Op Logico Do While</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpLogicoDoWhile(OpLogicoDoWhile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Op Logico IF</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Op Logico IF</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpLogicoIF(OpLogicoIF object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Op Else If</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Op Else If</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpElseIf(OpElseIf object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Op Else</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Op Else</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpElse(OpElse object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expr Logica</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expr Logica</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExprLogica(ExprLogica object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Termo Logico</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Termo Logico</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTermoLogico(TermoLogico object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fator Logico</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fator Logico</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFatorLogico(FatorLogico object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Com Log</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Com Log</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComLog(ComLog object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expr L</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expr L</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExprL(ExprL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attrib ID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attrib ID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribID(AttribID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Op Logico For</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Op Logico For</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpLogicoFor(OpLogicoFor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expr Logic For</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expr Logic For</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExprLogicFor(ExprLogicFor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment Cmd For</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment Cmd For</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignmentCmdFor(AssignmentCmdFor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expr Arit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expr Arit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExprArit(ExprArit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Termo</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Termo</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTermo(Termo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFator(Fator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Op Logico</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Op Logico</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpLogico(OpLogico object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Call Op</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Call Op</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodCallOp(MethodCallOp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Call Glob</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Call Glob</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodCallGlob(MethodCallGlob object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeCall(AttributeCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //CrossPlatformSwitch
