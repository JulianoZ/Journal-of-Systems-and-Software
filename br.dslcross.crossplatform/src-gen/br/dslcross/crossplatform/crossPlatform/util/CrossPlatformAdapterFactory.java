/**
 * generated by Xtext 2.24.0
 */
package br.dslcross.crossplatform.crossPlatform.util;

import br.dslcross.crossplatform.crossPlatform.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see br.dslcross.crossplatform.crossPlatform.CrossPlatformPackage
 * @generated
 */
public class CrossPlatformAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CrossPlatformPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CrossPlatformAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = CrossPlatformPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CrossPlatformSwitch<Adapter> modelSwitch =
    new CrossPlatformSwitch<Adapter>()
    {
      @Override
      public Adapter caseDomainmodel(Domainmodel object)
      {
        return createDomainmodelAdapter();
      }
      @Override
      public Adapter caseAbstractElement(AbstractElement object)
      {
        return createAbstractElementAdapter();
      }
      @Override
      public Adapter casePackageDeclaration(PackageDeclaration object)
      {
        return createPackageDeclarationAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter casePlatformDecl(PlatformDecl object)
      {
        return createPlatformDeclAdapter();
      }
      @Override
      public Adapter caseGlobalOld(GlobalOld object)
      {
        return createGlobalOldAdapter();
      }
      @Override
      public Adapter caseGlobalEntity(GlobalEntity object)
      {
        return createGlobalEntityAdapter();
      }
      @Override
      public Adapter caseGlobal(Global object)
      {
        return createGlobalAdapter();
      }
      @Override
      public Adapter caseDeploy(Deploy object)
      {
        return createDeployAdapter();
      }
      @Override
      public Adapter casePlatform(Platform object)
      {
        return createPlatformAdapter();
      }
      @Override
      public Adapter caseEntityEsp(EntityEsp object)
      {
        return createEntityEspAdapter();
      }
      @Override
      public Adapter caseDataType(DataType object)
      {
        return createDataTypeAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseCommandFeature(CommandFeature object)
      {
        return createCommandFeatureAdapter();
      }
      @Override
      public Adapter caseCommandPlat(CommandPlat object)
      {
        return createCommandPlatAdapter();
      }
      @Override
      public Adapter caseOperationGlobCallOld(OperationGlobCallOld object)
      {
        return createOperationGlobCallOldAdapter();
      }
      @Override
      public Adapter caseEntityGlobCall(EntityGlobCall object)
      {
        return createEntityGlobCallAdapter();
      }
      @Override
      public Adapter caseOperationGlobCall(OperationGlobCall object)
      {
        return createOperationGlobCallAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseOperationGlobalOld(OperationGlobalOld object)
      {
        return createOperationGlobalOldAdapter();
      }
      @Override
      public Adapter caseEntityGlobal(EntityGlobal object)
      {
        return createEntityGlobalAdapter();
      }
      @Override
      public Adapter caseOperationGlobal(OperationGlobal object)
      {
        return createOperationGlobalAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseParamList(ParamList object)
      {
        return createParamListAdapter();
      }
      @Override
      public Adapter caseDSLTypeRef(DSLTypeRef object)
      {
        return createDSLTypeRefAdapter();
      }
      @Override
      public Adapter caseDSLConcreteTypeRef(DSLConcreteTypeRef object)
      {
        return createDSLConcreteTypeRefAdapter();
      }
      @Override
      public Adapter caseDSLGenericTypeRef(DSLGenericTypeRef object)
      {
        return createDSLGenericTypeRefAdapter();
      }
      @Override
      public Adapter caseDSLGenericType(DSLGenericType object)
      {
        return createDSLGenericTypeAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseCommandOperation(CommandOperation object)
      {
        return createCommandOperationAdapter();
      }
      @Override
      public Adapter caseSpecialCommand(SpecialCommand object)
      {
        return createSpecialCommandAdapter();
      }
      @Override
      public Adapter caseStringTemplateFreeCod(StringTemplateFreeCod object)
      {
        return createStringTemplateFreeCodAdapter();
      }
      @Override
      public Adapter caseAbrevCmd(AbrevCmd object)
      {
        return createAbrevCmdAdapter();
      }
      @Override
      public Adapter caseMethodCallCmd(MethodCallCmd object)
      {
        return createMethodCallCmdAdapter();
      }
      @Override
      public Adapter caseVector(Vector object)
      {
        return createVectorAdapter();
      }
      @Override
      public Adapter caseCallAttributeObject(CallAttributeObject object)
      {
        return createCallAttributeObjectAdapter();
      }
      @Override
      public Adapter caseMethodCallGlobal(MethodCallGlobal object)
      {
        return createMethodCallGlobalAdapter();
      }
      @Override
      public Adapter caseOpLogicoWhile(OpLogicoWhile object)
      {
        return createOpLogicoWhileAdapter();
      }
      @Override
      public Adapter caseOpLogicoDoWhile(OpLogicoDoWhile object)
      {
        return createOpLogicoDoWhileAdapter();
      }
      @Override
      public Adapter caseOpLogicoIF(OpLogicoIF object)
      {
        return createOpLogicoIFAdapter();
      }
      @Override
      public Adapter caseOpElseIf(OpElseIf object)
      {
        return createOpElseIfAdapter();
      }
      @Override
      public Adapter caseOpElse(OpElse object)
      {
        return createOpElseAdapter();
      }
      @Override
      public Adapter caseExprLogica(ExprLogica object)
      {
        return createExprLogicaAdapter();
      }
      @Override
      public Adapter caseTermoLogico(TermoLogico object)
      {
        return createTermoLogicoAdapter();
      }
      @Override
      public Adapter caseFatorLogico(FatorLogico object)
      {
        return createFatorLogicoAdapter();
      }
      @Override
      public Adapter caseComLog(ComLog object)
      {
        return createComLogAdapter();
      }
      @Override
      public Adapter caseExprL(ExprL object)
      {
        return createExprLAdapter();
      }
      @Override
      public Adapter caseAttribID(AttribID object)
      {
        return createAttribIDAdapter();
      }
      @Override
      public Adapter caseOpLogicoFor(OpLogicoFor object)
      {
        return createOpLogicoForAdapter();
      }
      @Override
      public Adapter caseExprLogicFor(ExprLogicFor object)
      {
        return createExprLogicForAdapter();
      }
      @Override
      public Adapter caseAssignmentCmdFor(AssignmentCmdFor object)
      {
        return createAssignmentCmdForAdapter();
      }
      @Override
      public Adapter caseExprArit(ExprArit object)
      {
        return createExprAritAdapter();
      }
      @Override
      public Adapter caseTermo(Termo object)
      {
        return createTermoAdapter();
      }
      @Override
      public Adapter caseFator(Fator object)
      {
        return createFatorAdapter();
      }
      @Override
      public Adapter caseOpLogico(OpLogico object)
      {
        return createOpLogicoAdapter();
      }
      @Override
      public Adapter caseMethodCallOp(MethodCallOp object)
      {
        return createMethodCallOpAdapter();
      }
      @Override
      public Adapter caseMethodCallGlob(MethodCallGlob object)
      {
        return createMethodCallGlobAdapter();
      }
      @Override
      public Adapter caseAttributeCall(AttributeCall object)
      {
        return createAttributeCallAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Domainmodel <em>Domainmodel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Domainmodel
   * @generated
   */
  public Adapter createDomainmodelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.AbstractElement <em>Abstract Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.AbstractElement
   * @generated
   */
  public Adapter createAbstractElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.PackageDeclaration <em>Package Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.PackageDeclaration
   * @generated
   */
  public Adapter createPackageDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.PlatformDecl <em>Platform Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.PlatformDecl
   * @generated
   */
  public Adapter createPlatformDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.GlobalOld <em>Global Old</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.GlobalOld
   * @generated
   */
  public Adapter createGlobalOldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.GlobalEntity <em>Global Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.GlobalEntity
   * @generated
   */
  public Adapter createGlobalEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Global <em>Global</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Global
   * @generated
   */
  public Adapter createGlobalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Deploy <em>Deploy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Deploy
   * @generated
   */
  public Adapter createDeployAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Platform <em>Platform</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Platform
   * @generated
   */
  public Adapter createPlatformAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.EntityEsp <em>Entity Esp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.EntityEsp
   * @generated
   */
  public Adapter createEntityEspAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.DataType <em>Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.DataType
   * @generated
   */
  public Adapter createDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.CommandFeature <em>Command Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.CommandFeature
   * @generated
   */
  public Adapter createCommandFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.CommandPlat <em>Command Plat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.CommandPlat
   * @generated
   */
  public Adapter createCommandPlatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.OperationGlobCallOld <em>Operation Glob Call Old</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.OperationGlobCallOld
   * @generated
   */
  public Adapter createOperationGlobCallOldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.EntityGlobCall <em>Entity Glob Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.EntityGlobCall
   * @generated
   */
  public Adapter createEntityGlobCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.OperationGlobCall <em>Operation Glob Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.OperationGlobCall
   * @generated
   */
  public Adapter createOperationGlobCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.OperationGlobalOld <em>Operation Global Old</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.OperationGlobalOld
   * @generated
   */
  public Adapter createOperationGlobalOldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.EntityGlobal <em>Entity Global</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.EntityGlobal
   * @generated
   */
  public Adapter createEntityGlobalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.OperationGlobal <em>Operation Global</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.OperationGlobal
   * @generated
   */
  public Adapter createOperationGlobalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.ParamList <em>Param List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.ParamList
   * @generated
   */
  public Adapter createParamListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.DSLTypeRef <em>DSL Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.DSLTypeRef
   * @generated
   */
  public Adapter createDSLTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.DSLConcreteTypeRef <em>DSL Concrete Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.DSLConcreteTypeRef
   * @generated
   */
  public Adapter createDSLConcreteTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.DSLGenericTypeRef <em>DSL Generic Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.DSLGenericTypeRef
   * @generated
   */
  public Adapter createDSLGenericTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.DSLGenericType <em>DSL Generic Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.DSLGenericType
   * @generated
   */
  public Adapter createDSLGenericTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.CommandOperation <em>Command Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.CommandOperation
   * @generated
   */
  public Adapter createCommandOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.SpecialCommand <em>Special Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.SpecialCommand
   * @generated
   */
  public Adapter createSpecialCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.StringTemplateFreeCod <em>String Template Free Cod</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.StringTemplateFreeCod
   * @generated
   */
  public Adapter createStringTemplateFreeCodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.AbrevCmd <em>Abrev Cmd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.AbrevCmd
   * @generated
   */
  public Adapter createAbrevCmdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.MethodCallCmd <em>Method Call Cmd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.MethodCallCmd
   * @generated
   */
  public Adapter createMethodCallCmdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Vector <em>Vector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Vector
   * @generated
   */
  public Adapter createVectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.CallAttributeObject <em>Call Attribute Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.CallAttributeObject
   * @generated
   */
  public Adapter createCallAttributeObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.MethodCallGlobal <em>Method Call Global</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.MethodCallGlobal
   * @generated
   */
  public Adapter createMethodCallGlobalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.OpLogicoWhile <em>Op Logico While</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.OpLogicoWhile
   * @generated
   */
  public Adapter createOpLogicoWhileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.OpLogicoDoWhile <em>Op Logico Do While</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.OpLogicoDoWhile
   * @generated
   */
  public Adapter createOpLogicoDoWhileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.OpLogicoIF <em>Op Logico IF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.OpLogicoIF
   * @generated
   */
  public Adapter createOpLogicoIFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.OpElseIf <em>Op Else If</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.OpElseIf
   * @generated
   */
  public Adapter createOpElseIfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.OpElse <em>Op Else</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.OpElse
   * @generated
   */
  public Adapter createOpElseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.ExprLogica <em>Expr Logica</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.ExprLogica
   * @generated
   */
  public Adapter createExprLogicaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.TermoLogico <em>Termo Logico</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.TermoLogico
   * @generated
   */
  public Adapter createTermoLogicoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.FatorLogico <em>Fator Logico</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.FatorLogico
   * @generated
   */
  public Adapter createFatorLogicoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.ComLog <em>Com Log</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.ComLog
   * @generated
   */
  public Adapter createComLogAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.ExprL <em>Expr L</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.ExprL
   * @generated
   */
  public Adapter createExprLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.AttribID <em>Attrib ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.AttribID
   * @generated
   */
  public Adapter createAttribIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.OpLogicoFor <em>Op Logico For</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.OpLogicoFor
   * @generated
   */
  public Adapter createOpLogicoForAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.ExprLogicFor <em>Expr Logic For</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.ExprLogicFor
   * @generated
   */
  public Adapter createExprLogicForAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.AssignmentCmdFor <em>Assignment Cmd For</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.AssignmentCmdFor
   * @generated
   */
  public Adapter createAssignmentCmdForAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.ExprArit <em>Expr Arit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.ExprArit
   * @generated
   */
  public Adapter createExprAritAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Termo <em>Termo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Termo
   * @generated
   */
  public Adapter createTermoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.Fator <em>Fator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.Fator
   * @generated
   */
  public Adapter createFatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.OpLogico <em>Op Logico</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.OpLogico
   * @generated
   */
  public Adapter createOpLogicoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.MethodCallOp <em>Method Call Op</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.MethodCallOp
   * @generated
   */
  public Adapter createMethodCallOpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.MethodCallGlob <em>Method Call Glob</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.MethodCallGlob
   * @generated
   */
  public Adapter createMethodCallGlobAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link br.dslcross.crossplatform.crossPlatform.AttributeCall <em>Attribute Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see br.dslcross.crossplatform.crossPlatform.AttributeCall
   * @generated
   */
  public Adapter createAttributeCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //CrossPlatformAdapterFactory
